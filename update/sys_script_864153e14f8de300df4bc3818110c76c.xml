<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_281581_famousban_operations</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Insert New Operation</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	//Premièrement, vérifier que l'usager possède les droits de commis.
	if(gs.hasRole('x_281581_famousban.commis'))
	{
		//Initialiser usager création et date création
		var cree_par = gs.getUserID();
		var cree_le = new GlideDateTime();

		current.setValue('creee_par', cree_par);
		current.setValue('creee_le', cree_le);

		//Instantier classe fonctions utiles
		var utils = new FamousBankUtils();

		//Vérifier qu'un compte existe. Sinon, le créer
		var id_compte = utils.getAccount(current.client);
		
		if(id_compte == false){
			id_compte = utils.createAccount(current.client);
			
			if(id_compte == false){
				gs.addErrorMessage("Problem creating the account. Operation cancelled.");
				current.setAbortAction(true);
				return;
			}
			else{
				current.account_id = id_compte;
			}	
		}
		else{
			current.account_id = id_compte;
		}

		//Statut En validation
		if(current.a_valider_par_le_support == true){
			current.setValue('statut', "2");
		}
		//Sinon, effectuer l'opération
		else
		{	
			if(current.getValue('type') == 1){
				utils.depositAccount(current, current.montant);
			}
			else if(current.getValue('type') == 2){
				utils.withdrawAccount(current, current.montant);
			}
			else{
				gs.addErrorMessage("Unrecognized operation type. Operation aborted.");
				current.setAbortAction(true);
			}

			//Si non avorté, change le statut à Effectuée
			current.setValue('statut', "3");
			current.setValue('effectuee_le', new GlideDateTime());
			current.setValue('effectuee_par', gs.getUserID());
		}
	}
	else{
		gs.addErrorMessage("Insufficient rights for this operation. You need to have the clerk role.");
		current.setAbortAction(true);
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-09 19:47:22</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>864153e14f8de300df4bc3818110c76c</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>Insert New Operation</sys_name>
        <sys_overrides/>
        <sys_package display_value="FamousBank" source="x_281581_famousban">161c86a54f4da300df4bc3818110c7fd</sys_package>
        <sys_policy/>
        <sys_scope display_value="FamousBank">161c86a54f4da300df4bc3818110c7fd</sys_scope>
        <sys_update_name>sys_script_864153e14f8de300df4bc3818110c76c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-10-18 17:42:00</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=864153e14f8de300df4bc3818110c76c"/>
</record_update>
